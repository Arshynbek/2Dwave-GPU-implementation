
__global__ void CRM_forward(double *a, double *b, double *c, double *f, int n, int stepNum, int i) {
	int ix = blockIdx.x * blockDim.x + threadIdx.x;
	int iy = blockIdx.y * blockDim.y + threadIdx.y;
	int gridWidth = gridDim.x * blockDim.x;
	int thread_id = iy * gridWidth + ix;
	int i1, i2, offset;
	double q1, q2;
	if (thread_id >= stepNum) return;
	int j = pow(2.0, i + 1)*(thread_id + 1) - 1;
	offset = pow(2.0, i);
	i1 = j - offset;
	i2 = j + offset;
	q1 = a[j] / b[i1];
	q2 = c[j] / b[i2];
	if (j == n - 1) {
		q1 = a[j] / b[j - offset];
		b[j] = b[j] - c[j - offset] * q1;
		f[j] = f[j] - f[j - offset] * q1;
		a[j] = -a[j - offset] * q1;
		c[j] = 0.0;
	}
	else {
		q1 = a[j] / b[j - offset];
		q2 = c[j] / b[j + offset];
		b[j] = b[j] - c[j - offset] * q1 - a[j + offset] * q2;
		f[j] = f[j] - f[j - offset] * q1 - f[j + offset] * q2;
		a[j] = -a[j - offset] * q1;
		c[j] = -c[j + offset] * q2;
	}
}
__global__ void CRM_backward(double *a, double *b, double *c, double *f, double *x, int n, int stepNum, int i) {
	int ix = blockIdx.x * blockDim.x + threadIdx.x;
	int iy = blockIdx.y * blockDim.y + threadIdx.y;
	int gridWidth = gridDim.x * blockDim.x;
	int thread_id = iy * gridWidth + ix;
	int i1, i2, offset;
	if (thread_id >= stepNum) return;
	int j = pow(2.0, i + 1)*(thread_id + 1) - 1;
	offset = pow(2.0, i);
	i1 = j - offset;
	i2 = j + offset;

	if (j != i1) {
		if (i1 - offset < 0) x[i1] = (f[i1] - c[i1] * x[i1 + offset]) / b[i1];
		else x[i1] = (f[i1] - a[i1] * x[i1 - offset] - c[i1] * x[i1 + offset]) / b[i1];
	}
	if (j != i2) {
		if (i2 + offset >= n) x[i2] = (f[i2] - a[i2] * x[i2 - offset]) / b[i2];
		else x[i2] = (f[i2] - a[i2] * x[i2 - offset] - c[i2] * x[i2 + offset]) / b[i2];
	}
}
__global__ void cr_div(double *b, double *f, double *x, int i) {
	x[i] = f[i] / b[i];
}
//calculate the block size according to matrix size
void calc_dim(int size, dim3 *block, dim3 *grid) {
	if (size<4) { block->x = 1;block->y = 1; }
	else if (size<16) { block->x = 2;block->y = 2; }
	else if (size<64) { block->x = 4;block->y = 4; }
	else if (size<256) { block->x = 8;block->y = 8; }
	else if (size<512) { block->x = 16;block->y = 16; }
	else if (size<1024) { block->x = 32;block->y = 32; }
	else if (size<2048) { block->x = 64;block->y = 64; }
	else { block->x = 128;block->y = 128; }
	grid->x = (unsigned int)ceil(sqrt((double)size / block->x));
	grid->y = (unsigned int)ceil(sqrt((double)size / block->y));
}

void CR(double *a, double *b, double *c, double *f, double *y, int n)
{
     dim3 dimBlock, dimGrid;
	cudaError_t error;
  error = cudaGetLastError();
	int i, stepNum;
	double  *d_a = new double[n];
	double  *d_b = new double[n];
	double  *d_c = new double[n];
	double  *d_x = new double[n];
	double  *d_f = new double[n];
	// allocate device memory 
	cudaMalloc(&d_a, sizeof(double)*n);
	cudaMalloc(&d_b, sizeof(double)*n);
	cudaMalloc(&d_c, sizeof(double)*n);
	cudaMalloc(&d_x, sizeof(double)*n);
	cudaMalloc(&d_f, sizeof(double)*n);
	// memory transfers
	cudaMemcpy(d_a, a, sizeof(double)*n, cudaMemcpyHostToDevice);
	cudaMemcpy(d_b, b, sizeof(double)*n, cudaMemcpyHostToDevice);
	cudaMemcpy(d_c, c, sizeof(double)*n, cudaMemcpyHostToDevice);
	cudaMemcpy(d_f, f, sizeof(double)*n, cudaMemcpyHostToDevice);
	cudaMemcpy(d_x, y, sizeof(double)*n, cudaMemcpyHostToDevice);

	for (i = 0;i < log2(n + 1) - 1;i++) {
		stepNum = (n - pow(2.0, i + 1)) / pow(2.0, i + 1) + 1;
		//cout << "step_size: " << step_size << "\n";
		calc_dim(stepNum, &dimBlock, &dimGrid);
		CRM_forward <<<dimGrid, dimBlock >> >(d_a, d_b, d_c, d_f, n, stepNum, i);
	}
		cudaDeviceSynchronize();
		cr_div <<<1, 1 >> >(d_b, d_f, d_x, (n - 1) / 2);
		cudaDeviceSynchronize();
		for (i = log2(n + 1) - 2;i >= 0;i--) {
			stepNum = (n - pow(2.0, i + 1)) / pow(2.0, i + 1) + 1;
			calc_dim(stepNum, &dimBlock, &dimGrid);
			CRM_backward <<<dimGrid, dimBlock >>>(d_a, d_b, d_c, d_f, d_x, n, stepNum, i);
		}
		cudaMemcpy(y, d_x, sizeof(double)*n, cudaMemcpyDeviceToHost);
		cudaDeviceSynchronize();

		if (error != cudaSuccess) {
			cout << "CUDA memcpy x error:" << cudaGetErrorString(error);
			exit(0);
		}
		cudaDeviceReset();

}

