#include "stdafx.h"
#include "iostream"
#include "fstream"
#include "ctime"
#include "cstring"
#include "cstdio"
#include "iomanip"
#include "cmath"
using namespace std;

double const  L = 1.0, T = 1.0; 

void WriteToFile(double **matr, int n, int iter)
{
	char buffer[10];
	sprintf_s(buffer, "%d", iter);
	strcat_s(buffer, ".txt");
	fstream f;
	f.open(buffer, ios::out);
	for (int i = 0;i<n;i++)
	{
		for (int j = 0;j<n;j++)
		{
			f << matr[i][j] << " ";
		}
		f << "\n";
	}
	f.close();
}

int main()
{
	clock_t time1, time2;
	fstream rez, u00;
	rez.open("result_im.txt", ios::out);
	u00.open("u0_im.txt", ios::out);

	int n = 100;
	double *alfa = new double[n];
	double *beta = new double[n];
	double **u = new double *[n];
	double **U0 = new double *[n];
	double **Ux = new double *[n];
	double **U = new double *[n];
	for (int i = 0; i < n; i++)
	{
		u[i] = new double[n];
		U0[i] = new double[n];
		Ux[i] = new double[n];
		U[i] = new double[n];
	}
	int i, j, Nx, Ny, k=0, l, timer = 0, timer2 = 0;
	double ai, bi, ci, fi, pi = 3.14159265359, c = 1.0;
	double hx, hy, tau, h, t = 0, t2 = 0, max = 0;;

	time1 = clock();
	h = L / (n-1);
	tau =  T / ((n*n - 1));// ((n - 1)*(n - 1));
	cout << " h= " << h << " tau " << tau << endl;


	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			U0[i][j] = sin (pi*i*h)*sin(pi*j*h);
			u00 << U0[i][j] << " ";
		}
		u00 << "\n";
	}

	for (i = 0; i < n; i++)
	{
		U0[i][0] = 0;
		U0[i][n - 1] = 0;
		U0[0][i] = 0;
		U0[n - 1][i] = 0;
	}

	for (i = 0; i < n; i++)
	for (j = 0; j < n; j++)
			u[i][j] = U0[i][j];

	while (t <=T)
	{
		t = t + tau;
		timer++;
		for (j = 0; j < n; j++)
		{
			alfa[0] = 0.0;
			beta[0] = 0.0;
			for (i = 1; i < n - 1; i++)
			{
				ai = tau*tau/2; //tau*tau;
				ci = tau*tau/2; //tau*tau;
				bi = tau*tau + h*h; //2 * tau*tau + h*h;
				fi = 2 * h*h*U0[i][j] - tau*tau/2*u[i + 1][j] + (tau*tau +  h*h)*u[i][j] - tau*tau/2*u[i - 1][j];  //h*h*u[i][j] - 2 * h*h*U0[i][j];
				alfa[i] = ai / (bi - ci*alfa[i - 1]);
				beta[i] = (ci*beta[i - 1] - fi) / (bi - ci*alfa[i - 1]);
			}
			Ux[n - 1][j] = 0;
			for (i = n - 2; i >= 0; i--)
				Ux[i][j] = alfa[i] * Ux[i + 1][j] + beta[i];
		}



		for (i = 0; i<n ; i++)
		{
			alfa[0] = 0;
			beta[0] = 0;

			for (j = 1; j<n - 1; j++)
			{
				ai = tau*tau/2; //tau*tau;
				ci = tau*tau/2; //tau*tau;
				bi = tau*tau +  h*h;//2 * tau*tau + h*h;
				fi = 2 * h*h*Ux[i][j] - tau*tau/2*U0[i][j + 1] + (tau*tau + h*h)*U0[i][j] - tau*tau/2*U0[i][j - 1]; //h*h*U0[i][j] - 2 * h*h*Ux[i][j];
				alfa[j] = ai / (bi - ci*alfa[j - 1]);
				beta[j] = (ci*beta[j - 1] - fi) / (bi - ci*alfa[j - 1]);
			}
			U[i][n - 1] = 0;
			for (j = n - 2; j >= 0; j--)
				U[i][j] = alfa[j] * U[i][j + 1] + beta[j];
		}

		for (i = 0; i<n; i++)
			for (j = 0; j<n; j++)
			{
				u[i][j] = Ux[i][j];
				U0[i][j] = U[i][j];

			}


	} //endWhile



	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			rez << U[i][j] << " ";
		}
		rez << "\n";
	}
	time2 = clock() - time1;
	printf("\n computation time : %f", (double)time2 / CLOCKS_PER_SEC);
	for (i = 0; i < n; i++)
	{
		delete[] Ux[i];
		delete[] U0[i];
		delete[] u[i];
		delete[] U[i];
	}
	delete[] alfa, beta,Ux,U0,u,U;
	system("pause");
	return 0;
}




